const router = require("express").Router();
// Controllers:
const getVideogames = require("../controllers/getVideogames");
const getGenres = require("../controllers/getGenres");
const getPlatforms = require("../controllers/getPlatforms");
const postVideoGame = require("../controllers/postVideoGame");
const getVersionBack = require("../controllers/getVersionBack");
// Rutas:
router.get("/videogames", getVideogames); // obtiene un arreglo de objetos con los videojuegos
router.get("/videogames/name", getVideogames); // obtiene el detalle de un videojuego por query
router.get("/videogames/:id", getVideogames); // obtiene el detalle de un videojuego por id
router.get("/genres", getGenres); // obtiene el listado de g√©neros
router.get("/platforms", getPlatforms); //  obtiene el listado de plataformas
router.post("/videogames", postVideoGame); //  crea un nuevo videojuegos
router.get("/versionback", getVersionBack); // obtiene la versi√≥n del backend para que el front lo muestre en el about
module.exports = router;

//! getVideogames:
//? üìç GET | /videogames
// Obtiene un arreglo de objetos, donde cada objeto es un videojuego con su informaci√≥n.
//? üìç GET | /videogames/:idVideogame
// Esta ruta obtiene el detalle de un videojuego espec√≠fico. Es decir que devuelve un objeto con la informaci√≥n pedida en el detalle de un videojuego.
// El videojuego es recibido por par√°metro (ID).
// Tiene que incluir los datos del g√©nero del videojuego al que est√° asociado.
// Debe funcionar tanto para los videojuegos de la API como para los de la base de datos.
//? üìç GET | /videogames/name?="..."
// Esta ruta debe obtener los primeros 15 videojuegos que se encuentren con la palabra recibida por query.
// Debe poder buscarlo independientemente de may√∫sculas o min√∫sculas.
// Si no existe el videojuego, debe mostrar un mensaje adecuado.
// Debe buscar tanto los de la API como los de la base de datos.
//! postVideoGame:
//? üìç POST | /videogames
// Esta ruta recibir√° todos los datos necesarios para crear un videojuego y relacionarlo con sus g√©neros solicitados.
// Toda la informaci√≥n debe ser recibida por body.
// Debe crear un videojuego en la base de datos, y este debe estar relacionado con sus g√©neros indicados (al menos uno).
//! getGenres:
//? üìç GET | /genres
// Obtiene un arreglo con todos los g√©neros existentes de la API.
// En una primera instancia, cuando la base de datos este vac√≠a, deber√°s guardar todos los g√©neros que encuentres en la API.
// Estos deben ser obtenidos de la API (se evaluar√° que no haya hardcodeo). Luego de obtenerlos de la API, deben ser guardados en la base de datos para su posterior consumo desde all√≠.